Content-Type: text/enriched
Text-Width: 70

<x-color><param>#8FBCBB</param><bold>* Package Management</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* </bold></x-color>[[https://github.com/raxod502/straight.el][Straight]]

    Next-generation, purely functional package manager for the Emacs hacker.

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>defvar</x-color> <x-color><param>#D8DEE9</param>bootstrap-version</x-color>)
      (<x-color><param>#81A1C1</param>let</x-color> ((bootstrap-file
             (expand-file-name <x-color><param>#A3BE8C</param>"straight/repos/straight.el/bootstrap.el"</x-color> user-emacs-directory))
            (bootstrap-version 5))
        (<x-color><param>#81A1C1</param>unless</x-color> (file-exists-p bootstrap-file)
          (<x-color><param>#81A1C1</param>with-current-buffer</x-color>
              (url-retrieve-synchronously
               <x-color><param>#A3BE8C</param>"https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"</x-color>
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load bootstrap-file nil 'nomessage))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-color><param>#2E3440</param><x-bg-color><param>#2E3440</param>*</x-bg-color></x-color><x-color><param>#88C0D0</param><bold>* Packages</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/abo-abo/ace-window][Ace Window]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'ace-window)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Ag</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'ag)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* All the icons</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (straight-use-package 'all-the-icons)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/seagle0128/all-the-icons-ivy-rich][All the icons ivy rich]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'all-the-icons-ivy-rich)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[http://company-mode.github.io/][Company]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'company)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/ericdanan/counsel-projectile][Counsel projectile]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'counsel-projectile)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Dashboard</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'dashboard)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Doom modeline</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'doom-modeline)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Emojify</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'emojify)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Exec path from shell</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'exec-path-from-shell)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/johnw42/fira-code-emacs][Fira code mode]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (straight-use-package 'fira-code-mode)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/DarthFennec/highlight-indent-guides][Highlight indent guides]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (straight-use-package 'highlight-indent-guides)


      (<x-color><param>#81A1C1</param>setq</x-color> highlight-indent-guides-method 'character)

      (<x-color><param>#81A1C1</param>setq</x-color> highlight-indent-guides-character ?\Â·)

      (<x-color><param>#81A1C1</param>setq</x-color> highlight-indent-guides-auto-character-face-perc 20)

</x-color></x-bg-color><indent><x-color><param>#8FBCBB</param>    </x-color></indent><x-color><param>#8FBCBB</param>#+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/abo-abo/swiper][Ivy - Counsel - Swiper]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'ivy)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Magit</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'magit)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Org Bullets</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'org-bullets)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Projectile</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'projectile)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Reveal in osx finder</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'reveal-in-osx-finder)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/felipeochoa/rjsx-mode][Rjsx mode]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (straight-use-package 'rjsx-mode)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/rubocop-hq/rubocop-emacs][Rubocop]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (straight-use-package 'rubocop)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/purcell/sqlformat/][Sqlformat]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'sqlformat)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[http://web-mode.org/][Web mode]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (straight-use-package 'web-mode)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/justbur/emacs-which-key][Wich Key]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (straight-use-package 'which-key)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/zenozeng/yafolding.el][Yafolding]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (straight-use-package 'yafolding)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* </bold></x-color>[[https://github.com/emacsorphanage/git-gutter-fringe][Git-gutter-fringe]]

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (straight-use-package 'git-gutter-fringe)
      (<x-color><param>#81A1C1</param>require</x-color> '<x-color><param>#81A1C1</param>git-gutter-fringe</x-color>)


      (<x-color><param>#81A1C1</param>setq-default</x-color> left-fringe-width  15)
</x-color></x-bg-color><x-color><param>#78808f</param>    #+end_src</x-color>
<x-color><param>#8FBCBB</param><bold>* UI</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Fonts</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (add-to-list 'default-frame-alist '(font . <x-color><param>#A3BE8C</param>"Fira Code"</x-color>))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Modeline</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (doom-modeline-mode t)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Themes</bold></x-color>

    Nord is the best _hand:, sadly the emacs theme is missing some colors.
    The doom version is more complete but it doesn't understand what makes nord theme.
    By overriding the doom theme we do get the best of both it seems <x-display><param>(image :type png :file "/Users/tombosmans/.emacs.d/emojis/emojione-v2.2.6-22/1f603.png" :ascent center :heuristic-mask t :background "#2E3440" :scale 1 :height 15)</param>:D</x-display>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (straight-use-package 'doom-themes)
      (straight-use-package 'nord-theme)
      (load-theme 'doom-nord t)
      (load-theme 'nord t)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Dashboard</bold></x-color>

    First disable default buffers

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>setq-default</x-color> message-log-max nil)
      (kill-buffer <x-color><param>#A3BE8C</param>"*Messages*"</x-color>)
      (kill-buffer <x-color><param>#A3BE8C</param>"*scratch*"</x-color>)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>require</x-color> '<x-color><param>#81A1C1</param>dashboard</x-color>)
      (dashboard-setup-startup-hook)


      (<x-color><param>#81A1C1</param>setq</x-color> dashboard-banner-logo-title <x-color><param>#A3BE8C</param>"Welcome to Emacs Dashboard"</x-color>
            dashboard-startup-banner <x-color><param>#A3BE8C</param>"~/dotfiles/assets/banner.png"</x-color>
            dashboard-center-content nil
            dashboard-show-shortcuts nil
            dashboard-set-heading-icons t
            dashboard-set-file-icons t
            dashboard-items '((recents  . 5)
                              (projects . 20))
            dashboard-set-navigator t
            dashboard-navigator-buttons
            `(<x-color><param>#616e88</param>;; line1
</x-color>              ((,(all-the-icons-octicon <x-color><param>#A3BE8C</param>"mark-github"</x-color> <x-color><param>#81A1C1</param>:height</x-color> 1.1 <x-color><param>#81A1C1</param>:v-adjust</x-color> 0.0)
                <x-color><param>#A3BE8C</param>"Github"</x-color>
                <x-color><param>#A3BE8C</param>"Browse homepage"</x-color>
                (<x-color><param>#81A1C1</param>lambda</x-color> (<x-color><param>#8FBCBB</param>&rest</x-color> _) (browse-url <x-color><param>#A3BE8C</param>"https://github.com/TomBosmans"</x-color>))))))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Navigation</bold></x-color>

    Quickly switch windows in Emacs

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-x o"</x-color>) 'ace-window)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>***</x-color></x-bg-color><x-color><param>#5E81AC</param>* Documentation</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| Actions while in ace-window |                                                        |</x-color>
<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>|-----------------------------+--------------------------------------------------------|</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| key                         | action                                                 |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>|-----------------------------+--------------------------------------------------------|</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| x                           | delete window                                          |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| m                           | swap windows                                           |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| M                           | move window                                            |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| c                           | copy window                                            |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| j                           | select buffer                                          |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| n                           | select the previous window                             |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| u                           | select buffer in the other window                      |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| c                           | split window fairly, either vertically or horizontally |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| v                           | split window vertically                                |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| b                           | split window horizontally                              |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>    <x-color><param>#81A1C1</param>| o                           | maximize current window                                |</x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param><x-color><param>#5900649c7bd3</param> </x-color></x-display>    <x-color><param>#81A1C1</param>| ?                           | show these command bindings                            |</x-color>


<x-color><param>#8FBCBB</param><bold>* My Functions</bold></x-color>
<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Cleanup file</bold></x-color>

   removes tabs and white space.

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>cleanup-file</x-color> ()
       (untabify (point-min) (point-max))
       (whitespace-cleanup))


     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>cleanup-file-on-save</x-color> ()
       (add-hook 'before-save-hook 'cleanup-file nil t))


     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>stop-cleanup-file-on-save</x-color> ()

       (remove-hook 'before-save-hook 'cleanup-file t))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* dev mode</bold></x-color>

   This mode will setup all basics I like to have when writing code.

   Can be toggled on/off.


<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>  For fira code mode to work correctly you need to install the symbol font form ~/dotfiles/fonts.

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>  Also recommended to use fira code font, although it does work with other fonts.

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>dev-setup</x-color> ()
       (linum-mode t)
       (subword-mode t)
       (hl-line-mode t)
       (company-mode t)

       (fira-code-mode t)

       (highlight-indent-guides-mode t)

       (yafolding-mode t)

       (git-gutter-mode t)
       (toggle-truncate-lines)
       (cleanup-file-on-save)

       <x-color><param>#616e88</param>;; keybindings

</x-color>       (local-set-key (kbd <x-color><param>#A3BE8C</param>"C-M-return"</x-color>) 'yafolding-toggle-all)

       (local-set-key (kbd <x-color><param>#A3BE8C</param>"C-return"</x-color>) 'yafolding-toggle-element))


     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>dev-teardown</x-color> ()
       (linum-mode 0)
       (subword-mode 0)
       (hl-line-mode 0)
       (company-mode 0)

       (fira-code-mode 0)

       (yafolding-mode 0)

       (highlight-indent-guides-mode 0)

       (git-gutter-mode 0)
       (toggle-truncate-lines)
       (stop-cleanup-file-on-save))


     (<x-color><param>#81A1C1</param>define-minor-mode</x-color> <x-color><param>#88C0D0</param>dev-mode</x-color>
       <x-color><param>#616e88</param>"Hammer time!."</x-color>
       <x-color><param>#81A1C1</param>:lighter</x-color> <x-color><param>#A3BE8C</param>" dev"</x-color>
       (<x-color><param>#81A1C1</param>if</x-color> dev-mode
           (dev-setup)
         (dev-teardown)))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* open terminal</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp
</x-color><x-color><param>#D8DEE9</param>     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>named-term</x-color> (name)
       <x-color><param>#616e88</param>"Create a terminal with given name."</x-color>
       (<x-color><param>#81A1C1</param>interactive</x-color> <x-color><param>#A3BE8C</param>"sName: "</x-color>)
       (ansi-term <x-color><param>#A3BE8C</param>"/bin/zsh"</x-color> name))


     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>open-named-term</x-color> (name)
       <x-color><param>#616e88</param>"Create or open a named terminal buffer"</x-color>
       (<x-color><param>#81A1C1</param>interactive</x-color> <x-color><param>#A3BE8C</param>"sName:"</x-color>)
       (<x-color><param>#81A1C1</param>let</x-color> ((buffer (concat <x-color><param>#A3BE8C</param>"*"</x-color> name <x-color><param>#A3BE8C</param>"*"</x-color>)))
         (<x-color><param>#81A1C1</param>if</x-color> (get-buffer buffer) (switch-to-buffer buffer) (named-term name))))


     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>open-console</x-color> ()
       <x-color><param>#616e88</param>"Create or open terminal buffer."</x-color>
       (<x-color><param>#81A1C1</param>interactive</x-color>)
       (open-named-term <x-color><param>#A3BE8C</param>"console"</x-color>))
</x-color></x-bg-color><x-color><param>#78808f</param>   #+end_src</x-color>

<x-color><param>#8FBCBB</param><bold>* Global Keybindings</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>     <x-color><param>#616e88</param>;; (global-set-key (kbd "C-x O") 'previous-multiframe-window) ;; revert of C-x o
</x-color>     (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c r"</x-color>) 'replace-regexp)
     (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c t"</x-color>) 'open-console)

     (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c T"</x-color>) 'open-named-term)
     (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c z"</x-color>) 'reveal-in-osx-finder)
     (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c l o"</x-color>) 'browse-url-at-point)

     (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-s"</x-color>) 'swiper)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src
</x-color><x-color><param>#8FBCBB</param><bold>* General Settings</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Pickup changes to files.</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>     (global-auto-revert-mode 1)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Display available keybindings in popup</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (which-key-mode t)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Prevent 'saving customizations' to be writtin in init.el.</bold></x-color>

    https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>setq</x-color> custom-file <x-color><param>#A3BE8C</param>"~/.emacs.d/custom.el"</x-color>)
      (<x-color><param>#81A1C1</param>when</x-color> (file-exists-p <x-color><param>#A3BE8C</param>"custom.el"</x-color>) (load <x-color><param>#A3BE8C</param>"custom"</x-color>))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Project management</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (projectile-mode t)
      (define-key projectile-mode-map (kbd <x-color><param>#A3BE8C</param>"s-p"</x-color>) 'projectile-command-map)
      (define-key projectile-mode-map (kbd <x-color><param>#A3BE8C</param>"C-c p"</x-color>) 'projectile-command-map)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Silver Searcher</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>***</x-color></x-bg-color><x-color><param>#5E81AC</param>* Install</x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src shell

</x-color><x-color><param>#D8DEE9</param>      brew install the_silver_searcher
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>***</x-color></x-bg-color><x-color><param>#5E81AC</param>* Keybindings</x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c s s"</x-color>) 'ag)
      (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c s p"</x-color>) 'ag-project)
      (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c s k"</x-color>) 'ag-kill-buffers)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Stop making annoying sounds</bold></x-color>

    The error sounds just hurts my ears...

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>my-bell-function</x-color> ())
      (<x-color><param>#81A1C1</param>setq</x-color> ring-bell-function 'my-bell-function)
      (<x-color><param>#81A1C1</param>setq</x-color> visible-bell nil)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Line numbers</bold></x-color>

    We don't enable it globally, enable it in the modes you want.

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>setq</x-color> linum-format <x-color><param>#A3BE8C</param>"%4d \u2502"</x-color>)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Highlight matching parenthesis</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (show-paren-mode t)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Disable GNU clutter</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (menu-bar-mode -1)
      (toggle-scroll-bar -1)
      (tool-bar-mode -1)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Say no to tabs</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>     (<x-color><param>#81A1C1</param>setq-default</x-color> indent-tabs-mode nil)
     (<x-color><param>#81A1C1</param>setq-default</x-color> tab-width 2)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Stop making temp files!</bold></x-color>

   Just ripped it from [[https://github.com/pjaspers/emacs/blob/master/customizations/pjaspers-editing.el#L51][pjasper]].
<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>     (<x-color><param>#81A1C1</param>setq</x-color> backup-inhibited t
           make-backup-files nil
           backup-directory-alist `((<x-color><param>#A3BE8C</param>".*"</x-color> . ,temporary-file-directory))
           auto-save-file-name-transforms `((<x-color><param>#A3BE8C</param>".*"</x-color> ,temporary-file-directory t)))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Fix shell commands on osx</bold></x-color>

    OS X has an issue with picking up the right system env
    Explictly setting it here (So shell-command and buddies can use it)

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>require</x-color> '<x-color><param>#81A1C1</param>exec-path-from-shell</x-color>)
      (<x-color><param>#81A1C1</param>when</x-color> (memq window-system '(mac ns))
        (exec-path-from-shell-initialize))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Mini buffer completion</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (ivy-mode t)
      (counsel-mode t)
      (counsel-projectile-mode t)
      (ivy-rich-mode t)
      (all-the-icons-ivy-rich-mode t)


      (<x-color><param>#81A1C1</param>setq</x-color> ivy-use-virtual-buffers t
            ivy-count-format <x-color><param>#A3BE8C</param>"%d/%d "</x-color>)


      (<x-color><param>#81A1C1</param>setq</x-color> all-the-icons-ivy-file-commands
            '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color>**** [[https://github.com/abo-abo/swiper/wiki/Dont-open-directory-mode][don't open directory mode]]

     When enable "Don't open directory" mode, ivy-mode will only open file and don't open directory. if user want to open dirctory, another key should typed, for example: "C-f". This mode is simple and predictable.


     When the below code is an example:
     1 when type "enter", if current candidate is a directory, its subdir will be completed, if a file, open it.
     2 if user want to open directory, type "C-f".


     #+begin_src emacs-lisp

       (setq ivy-extra-directories nil)


       (defun eh-ivy-open-current-typed-path ()
         (interactive)
         (when ivy--directory
           (let* ((dir ivy--directory)
                  (text-typed ivy-text)
                  (path (concat dir text-typed)))
             (delete-minibuffer-contents)
             (ivy--done path))))


       (define-key ivy-minibuffer-map (kbd "<<return>") 'ivy-alt-done)
       (define-key ivy-minibuffer-map (kbd "C-f") 'eh-ivy-open-current-typed-path)
<x-color><param>#78808f</param>     #+end_src</x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Delete selection</bold></x-color>

<x-display><param>(disable-eval (disable-eval (disable-eval (disable-eval "Â·"))))</param> </x-display>   Act like a normal text editor.

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>      (delete-selection-mode t)
</x-color></x-bg-color><x-color><param>#78808f</param>    #+end_src</x-color>
<x-color><param>#8FBCBB</param><bold>* Advanced Settings</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Git</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Keybindings</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c m s"</x-color>) 'magit-status)
      (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c m p"</x-color>) 'magit-push)
      (global-set-key (kbd <x-color><param>#A3BE8C</param>"C-c m c"</x-color>) 'magit-checkout)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Org</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Settings</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>setq</x-color> org-hide-emphasis-markers t)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Disable emacs build in version control</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>setq</x-color> vc-handled-backends nil)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Add nice bullets</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>require</x-color> '<x-color><param>#81A1C1</param>org-bullets</x-color>)


      (add-hook 'org-mode-hook (<x-color><param>#81A1C1</param>lambda</x-color> () (org-bullets-mode 1)))
      (<x-color><param>#81A1C1</param>setq</x-color> org-bullets-bullet-list '(<x-color><param>#A3BE8C</param>"â"</x-color>))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Make Lists use a dot</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (font-lock-add-keywords 'org-mode
                              '((<x-color><param>#A3BE8C</param>"^ *<x-color><param>#EBCB8B</param>\\(</x-color>[-]<x-color><param>#EBCB8B</param>\\)</x-color> "</x-color>
                                 (0 (<x-color><param>#81A1C1</param>prog1</x-color> () (compose-region (match-beginning 1) (match-end 1) <x-color><param>#A3BE8C</param>"â¢"</x-color>))))))
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Add emojis</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (add-hook 'org-mode-hook 'emojify-mode)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* Add cleanup on save</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (add-hook 'org-mode-hook 'cleanup-file-on-save)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* theme</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>    #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>      (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>theme-org-mode-hook</x-color> ()
        (<x-color><param>#81A1C1</param>dolist</x-color> (face '(org-level-1)) (set-face-attribute face nil <x-color><param>#81A1C1</param>:weight</x-color> 'semi-bold <x-color><param>#81A1C1</param>:height</x-color> 1.3))
        (<x-color><param>#81A1C1</param>dolist</x-color> (face '(org-level-2)) (set-face-attribute face nil <x-color><param>#81A1C1</param>:weight</x-color> 'semi-bold <x-color><param>#81A1C1</param>:height</x-color> 1.2))
        (<x-color><param>#81A1C1</param>dolist</x-color> (face '(org-level-3)) (set-face-attribute face nil <x-color><param>#81A1C1</param>:weight</x-color> 'semi-bold <x-color><param>#81A1C1</param>:height</x-color> 1.1)))


        (add-hook 'org-mode-hook 'theme-org-mode-hook)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>    #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Ruby</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>  #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>    (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>my-ruby-mode-hook</x-color> ()
      (rubocop-mode t)

      (dev-mode t))


    (add-hook 'ruby-mode-hook 'my-ruby-mode-hook)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>  #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Terminal</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>my-term-mode-hook</x-color> ()
       <x-color><param>#616e88</param>"Load when term-mode is loaded."</x-color>
       (define-key term-raw-map (kbd <x-color><param>#A3BE8C</param>"C-c C-y"</x-color>) 'term-paste)) <x-color><param>#616e88</param>;; paste clipboard into terminal

</x-color>

     (add-hook 'term-mode-hook 'my-term-mode-hook)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src

</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* SQL</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>**</x-color></x-bg-color><x-color><param>#81A1C1</param><bold>* format</bold></x-color>

<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>***</x-color></x-bg-color><x-color><param>#5E81AC</param>* Dependencies</x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src shell

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>        pip3 install sqlparse
</x-color></x-bg-color><x-color><param>#8FBCBB</param>     #+end_src

</x-color>**** setup

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>     #+begin_src emacs-lisp

</x-color><x-color><param>#D8DEE9</param>       (<x-color><param>#81A1C1</param>setq</x-color> sqlformat-command 'pgformatter)
       (<x-color><param>#81A1C1</param>setq</x-color> sqlformat-args '(<x-color><param>#A3BE8C</param>"-s2"</x-color> <x-color><param>#A3BE8C</param>"-g"</x-color>))


       (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>my-sql-mode-hook</x-color> ()
         <x-color><param>#616e88</param>"Load whenever sql-mode is loaded."</x-color>

         (dev-mode t)
         (local-set-key (kbd <x-color><param>#A3BE8C</param>"C-c C-f"</x-color>) 'sqlformat))


       (add-hook 'sql-mode-hook 'my-sql-mode-hook)
</x-color></x-bg-color><x-color><param>#78808f</param>     #+end_src</x-color>
<x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* HTML</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>     (add-to-list 'auto-mode-alist '(<x-color><param>#A3BE8C</param>"\\.html?\\'"</x-color> . web-mode))
     (add-to-list 'auto-mode-alist '(<x-color><param>#A3BE8C</param>"\\.erb\\'"</x-color> . web-mode))

     (add-to-list 'auto-mode-alist '(<x-color><param>#A3BE8C</param>"\\.hbs\\'"</x-color> . web-mode))


     (<x-color><param>#81A1C1</param>setq</x-color> web-mode-markup-indent-offset 2
           web-mode-css-indent-offset 2
           web-mode-code-indent-offset 2)


     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>my-web-mode-hook</x-color> ()

       (dev-mode t))


     (add-hook 'web-mode-hook  'my-web-mode-hook)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* Javascript</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>     (add-to-list 'auto-mode-alist '(<x-color><param>#A3BE8C</param>"\\.js\\'"</x-color> . rjsx-mode))


     (<x-color><param>#81A1C1</param>setq</x-color> js-indent-level 2)


     (<x-color><param>#81A1C1</param>defun</x-color> <x-color><param>#88C0D0</param>my-js-mode-hook</x-color> ()

       (dev-mode t))


     (add-hook 'rjsx-mode-hook 'my-js-mode-hook)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src
</x-color><x-bg-color><param>#2E3440</param><x-color><param>#2E3440</param>*</x-color></x-bg-color><x-color><param>#88C0D0</param><bold>* css</bold></x-color>

<x-bg-color><param>#373E4C</param><x-color><param>#8FBCBB</param>   #+begin_src emacs-lisp

</x-color></x-bg-color><x-bg-color><param>#373E4C</param><x-color><param>#D8DEE9</param>     (<x-color><param>#81A1C1</param>setq</x-color> css-indent-offset 2)

     (add-hook 'css-mode-hook 'dev-mode)
</x-color></x-bg-color><x-color><param>#8FBCBB</param>   #+end_src
</x-color>