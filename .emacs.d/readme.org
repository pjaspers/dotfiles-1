* My Emacs
** Package Management
*** [[https://github.com/raxod502/straight.el][Straight]]
    üçÄ Next-generation, purely functional package manager for the Emacs hacker.
    #+begin_src emacs-lisp
      (defvar bootstrap-version)
      (let ((bootstrap-file
	     (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	    (bootstrap-version 5))
	(unless (file-exists-p bootstrap-file)
	  (with-current-buffer
	      (url-retrieve-synchronously
	       "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	       'silent 'inhibit-cookies)
	    (goto-char (point-max))
	    (eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))
    #+end_src
*** Packages
    #+begin_src emacs-lisp
      (straight-use-package 'all-the-icons)    
    #+end_src
** General Settings
*** Delete selection
    Act like a normal text editor.
    #+begin_src emacs-lisp
      (delete-selection-mode t)
    #+end_src
*** Disable GNU clutter
    #+begin_src emacs-lisp
      (menu-bar-mode -1)
      (toggle-scroll-bar -1)
      (tool-bar-mode -1)
    #+end_src
*** Highlight matching parenthesis
    #+begin_src emacs-lisp
      (show-paren-mode t)
    #+end_src
*** Package Manager
*** Prevent 'saving customizations' to be writtin in init.el.
   https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html
   #+begin_src emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (when (file-exists-p "custom.el") (load "custom"))
   #+end_src
*** Stop making annoying sounds
    The error sounds just hurts my ears... :hear_no_evil:
    #+begin_src emacs-lisp
      (defun my-bell-function ())
      (setq ring-bell-function 'my-bell-function)
      (setq visible-bell nil)
    #+end_src  
** UI
*** Dashboard
    First disable default buffers
    #+begin_src emacs-lisp
      (setq-default message-log-max nil)
      (kill-buffer "*Messages*")
      (kill-buffer "*scratch*")
    #+end_src

    #+begin_src emacs-lisp
      (straight-use-package 'dashboard)
      (require 'dashboard)
      (dashboard-setup-startup-hook)

      (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard"
	    dashboard-startup-banner "~/dotfiles/assets/banner.png"
	    dashboard-center-content nil
	    dashboard-show-shortcuts nil
	    dashboard-set-heading-icons t
	    dashboard-set-file-icons t
	    dashboard-items '((recents  . 5)
			      (projects . 20))
	    dashboard-set-navigator t)

      ;; Format: "(icon title help action face prefix suffix)"
      (setq dashboard-navigator-buttons
	    `(;; line1
	      ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
	       "Github"
	       "Browse homepage"
	       (lambda (&rest _) (browse-url "https://github.com/TomBosmans"))))))
    #+end_src
*** Fonts
    #+begin_src emacs-lisp
      (add-to-list 'default-frame-alist '(font . "Source Code Pro"))
    #+end_src
*** Themes
    Nord is the best :ok_hand:, sadly the emacs theme is missing some colors.
    The doom version is more complete but it doesn't understand what makes nord theme.
    By overriding the doom theme we do get the best of both it seems :D
    #+begin_src emacs-lisp
      (straight-use-package 'doom-themes)
      (straight-use-package 'nord-theme)
      (load-theme 'doom-nord t)
      (load-theme 'nord t)
    #+end_src
** Modes
*** [[https://github.com/abo-abo/ace-window][Ace Window]]
    Quickly switch windows in Emacs
    
    Actions while in ace-window:
    x - delete window
    m - swap windows
    M - move window
    c - copy window
    j - select buffer
    n - select the previous window
    u - select buffer in the other window
    c - split window fairly, either vertically or horizontally
    v - split window vertically
    b - split window horizontally
    o - maximize current window
    ? - show these command bindings

    #+begin_src emacs-lisp
      (straight-use-package 'ace-window)
      (global-set-key (kbd "M-o") 'ace-window)
    #+end_src
*** AG
    #+begin_src emacs-lisp
      (straight-use-package 'ag)
    #+end_src

    OS X has an issue with picking up the right system env
    Explictly setting it here (So shell-command and buddies can use it)
    #+begin_src emacs-lisp
      (straight-use-package 'exec-path-from-shell)
      (require 'exec-path-from-shell)
      (when (memq window-system '(mac ns))
        (exec-path-from-shell-initialize))
    #+end_src
*** Centaur Tabs
    #+begin_src emacs-lisp
      (straight-use-package 'centaur-tabs)
      (setq centaur-tabs-set-bar 'under
	    x-underline-at-descent-line t
	    centaur-tabs-height 25
	    centaur-tabs-set-icons t
	    centaur-tabs-gray-out-icons 'buffer
	    centaur-tabs-set-modified-marker t
	    centaur-tabs-modified-marker "‚Ä¢")

      (centaur-tabs-mode t)
    #+end_src
*** Doom Mode Line
    #+begin_src emacs-lisp
      (straight-use-package 'doom-modeline)
      (doom-modeline-mode t)
    #+end_src
*** Emojify
    Yeah yeah I know...
    #+begin_src emacs-lisp
      (straight-use-package 'emojify)
      (add-hook 'org-mode-hook 'emojify-mode)
    #+end_src
*** Git Gutter Fringe
    #+begin_src emacs-lisp
      (straight-use-package 'git-gutter-fringe)
      (require 'git-gutter-fringe)
      ;; (global-git-gutter-mode +1)
      ;; (setq-default left-fringe-width  20)
    #+end_src
*** IDO
    #+begin_src emacs-lisp
      (setq ido-everywhere t)
      (setq ido-enable-flex-matching t)
      (ido-mode t)
    #+end_src
*** Linum mode
    We don't enable it globally, enable it in the modes you want.
    #+begin_src emacs-lisp
      (setq linum-format "%3d \u2502")
    #+end_src
*** Magit
    #+begin_src emacs-lisp
      (straight-use-package 'magit)
      (global-set-key (kbd "C-c m") 'magit-status)
    #+end_src
*** Org
    #+begin_src emacs-lisp
      (straight-use-package 'org-bullets)
      (require 'org-bullets)

      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-bullets-bullet-list '("‚Åñ")
	    org-hide-emphasis-markers t)
    #+end_src
    Make Lists use a dot:
    #+begin_src emacs-lisp
      (font-lock-add-keywords 'org-mode
			      '(("^ *\\([-]\\) "
				 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))
    #+end_src
*** Projectile
    #+begin_src emacs-lisp
      (straight-use-package 'projectile)

      (projectile-mode t)
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    #+end_src
*** Reveal in OSX Finder
    #+begin_src emacs-lisp
      (straight-use-package 'reveal-in-osx-finder)
      (global-set-key (kbd "C-c z") 'reveal-in-osx-finder)
    #+end_src
*** [[https://github.com/justbur/emacs-which-key][Wich Key]]
    Emacs package that displays available keybindings in popup
    #+begin_src emacs-lisp
      (straight-use-package 'which-key)
      (which-key-mode t)
    #+end_src
** Keybindings
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x O") 'previous-multiframe-window) ;; revert of C-x o
   #+end_src

