* My Emacs
** Package Management
*** [[https://github.com/raxod502/straight.el][Straight]]
    üçÄ Next-generation, purely functional package manager for the Emacs hacker.
    #+begin_src emacs-lisp
      (defvar bootstrap-version)
      (let ((bootstrap-file
	     (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	    (bootstrap-version 5))
	(unless (file-exists-p bootstrap-file)
	  (with-current-buffer
	      (url-retrieve-synchronously
	       "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	       'silent 'inhibit-cookies)
	    (goto-char (point-max))
	    (eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))
    #+end_src
*** Packages
**** [[https://github.com/abo-abo/ace-window][Ace Window]]
     #+begin_src emacs-lisp
       (straight-use-package 'ace-window)
     #+end_src
**** Ag
     #+begin_src emacs-lisp
       (straight-use-package 'ag)
     #+end_src
**** All the icons
    #+begin_src emacs-lisp
      (straight-use-package 'all-the-icons)    
    #+end_src
**** [[https://github.com/seagle0128/all-the-icons-ivy-rich][All the icons ivy rich]]
     #+begin_src emacs-lisp
       (straight-use-package 'all-the-icons-ivy-rich)
     #+end_src
**** [[http://company-mode.github.io/][Company]]
     #+begin_src emacs-lisp
       (straight-use-package 'company)
     #+end_src
**** [[https://github.com/ericdanan/counsel-projectile][Counsel projectile]]
     #+begin_src emacs-lisp
       (straight-use-package 'counsel-projectile)
     #+end_src
**** Dashboard
     #+begin_src emacs-lisp
       (straight-use-package 'dashboard)
     #+end_src
**** Doom modeline
     #+begin_src emacs-lisp
       (straight-use-package 'doom-modeline)
     #+end_src
**** Emojify
     #+begin_src emacs-lisp
       (straight-use-package 'emojify)
     #+end_src
**** Exec path from shell
     #+begin_src emacs-lisp
       (straight-use-package 'exec-path-from-shell)
     #+end_src
**** [[https://github.com/abo-abo/swiper][Ivy - Counsel - Swiper]]
     #+begin_src emacs-lisp
       (straight-use-package 'ivy)
     #+end_src
**** Magit
     #+begin_src emacs-lisp
       (straight-use-package 'magit)
     #+end_src
**** Org Bullets
     #+begin_src emacs-lisp
       (straight-use-package 'org-bullets)
     #+end_src
**** Reveal in osx finder
     #+begin_src emacs-lisp
       (straight-use-package 'reveal-in-osx-finder)
     #+end_src
**** Treemacs
     #+begin_src emacs-lisp
       (straight-use-package 'treemacs)
     #+end_src
**** [[https://github.com/justbur/emacs-which-key][Wich Key]]
     #+begin_src emacs-lisp
       (straight-use-package 'which-key)
     #+end_src
**** [[https://github.com/rnkn/olivetti][Olivetti]]
     #+begin_src emacs-lisp
       (straight-use-package 'olivetti)
     #+end_src
** General Settings
*** Delete selection
    Act like a normal text editor.
    #+begin_src emacs-lisp
      (delete-selection-mode t)
    #+end_src
*** Disable GNU clutter
    #+begin_src emacs-lisp
      (menu-bar-mode -1)
      (toggle-scroll-bar -1)
      (tool-bar-mode -1)
    #+end_src
*** Highlight matching parenthesis
    #+begin_src emacs-lisp
      (show-paren-mode t)
    #+end_src
*** Prevent 'saving customizations' to be writtin in init.el.
   https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html
   #+begin_src emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (when (file-exists-p "custom.el") (load "custom"))
   #+end_src
*** Stop making annoying sounds
    The error sounds just hurts my ears... :hear_no_evil:
    #+begin_src emacs-lisp
      (defun my-bell-function ())
      (setq ring-bell-function 'my-bell-function)
      (setq visible-bell nil)
    #+end_src  
*** Fix shell commands on osx
    OS X has an issue with picking up the right system env
    Explictly setting it here (So shell-command and buddies can use it)
    #+begin_src emacs-lisp
      (require 'exec-path-from-shell)
      (when (memq window-system '(mac ns))
        (exec-path-from-shell-initialize))
    #+end_src

** UI
*** Dashboard
    First disable default buffers
    #+begin_src emacs-lisp
      (setq-default message-log-max nil)
      (kill-buffer "*Messages*")
      (kill-buffer "*scratch*")
    #+end_src

    #+begin_src emacs-lisp
      (require 'dashboard)
      (dashboard-setup-startup-hook)

      (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard"
	    dashboard-startup-banner "~/dotfiles/assets/banner.png"
	    dashboard-center-content nil
	    dashboard-show-shortcuts nil
	    dashboard-set-heading-icons t
	    dashboard-set-file-icons t
	    dashboard-items '((recents  . 5)
			      (projects . 20))
	    dashboard-set-navigator t
	    dashboard-navigator-buttons
	    `(;; line1
	      ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
		"Github"
		"Browse homepage"
		(lambda (&rest _) (browse-url "https://github.com/TomBosmans"))))))
    #+end_src
*** Fonts
    #+begin_src emacs-lisp
      (add-to-list 'default-frame-alist '(font . "Source Code Pro"))
    #+end_src
*** Mini buffer completion
    #+begin_src emacs-lisp
      (ivy-mode t)
      (counsel-mode t)
      (counsel-projectile-mode t)
      (ivy-rich-mode t)
      (all-the-icons-ivy-rich-mode t)

      (setq ivy-use-virtual-buffers t
	    ivy-count-format "%d/%d ")

      (setq all-the-icons-ivy-file-commands
	    '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir))
    #+end_src
**** [[https://github.com/abo-abo/swiper/wiki/Dont-open-directory-mode][don't open directory mode]]
     When enable "Don't open directory" mode, ivy-mode will only open file and don't open directory. if user want to open dirctory, another key should typed, for example: "C-f". This mode is simple and predictable.

     When the below code is an example:
     1 when type "enter", if current candidate is a directory, its subdir will be completed, if a file, open it.
     2 if user want to open directory, type "C-f".

     #+begin_src emacs-lisp
       (setq ivy-extra-directories nil)

       (defun eh-ivy-open-current-typed-path ()
	 (interactive)
	 (when ivy--directory
	   (let* ((dir ivy--directory)
		  (text-typed ivy-text)
		  (path (concat dir text-typed)))
	     (delete-minibuffer-contents)
	     (ivy--done path))))

       (define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done)
       (define-key ivy-minibuffer-map (kbd "C-f") 'eh-ivy-open-current-typed-path)
     #+end_src
*** Modeline
    #+begin_src emacs-lisp
      (doom-modeline-mode t)
    #+end_src
*** Themes
    Nord is the best :ok_hand:, sadly the emacs theme is missing some colors.
    The doom version is more complete but it doesn't understand what makes nord theme.
    By overriding the doom theme we do get the best of both it seems :D
    #+begin_src emacs-lisp
      (straight-use-package 'doom-themes)
      (straight-use-package 'nord-theme)
      (load-theme 'doom-nord t)
      (load-theme 'nord t)
    #+end_src
*** Navigation
    Quickly switch windows in Emacs
    
    Actions while in ace-window:
    x - delete window
    m - swap windows
    M - move window
    c - copy window
    j - select buffer
    n - select the previous window
    u - select buffer in the other window
    c - split window fairly, either vertically or horizontally
    v - split window vertically
    b - split window horizontally
    o - maximize current window
    ? - show these command bindings

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x o") 'ace-window)
    #+end_src
*** Display available keybindings in popup
    #+begin_src emacs-lisp
      (which-key-mode t)
    #+end_src
** Modes
*** Git Gutter Fringe
    #+begin_src emacs-lisp
      (straight-use-package 'git-gutter-fringe)
      (require 'git-gutter-fringe)
      ;; (global-git-gutter-mode +1)
      ;; (setq-default left-fringe-width  20)
    #+end_src
*** Linum mode
    We don't enable it globally, enable it in the modes you want.
    #+begin_src emacs-lisp
      (setq linum-format "%3d \u2502")
    #+end_src
*** Projectile
    #+begin_src emacs-lisp
      (straight-use-package 'projectile)

      (projectile-mode t)
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    #+end_src
** Keybindings
   #+begin_src emacs-lisp
     ;; (global-set-key (kbd "C-x O") 'previous-multiframe-window) ;; revert of C-x o
     (global-set-key (kbd "C-c r") 'replace-regexp)
     (global-set-key (kbd "C-c t") 'ansi-term)
     (global-set-key (kbd "C-c z") 'reveal-in-osx-finder)
     (global-set-key (kbd "C-c l o") 'browse-url-at-point)
   #+end_src
** Terminal
*** This is to paste from clipboard in terminal mode
   #+begin_src emacs-lisp
     (eval-after-load "term" '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))
   #+end_src
** Ruby
*** Enable linum mode
   #+begin_src emacs-lisp
     (add-hook 'ruby-mode-hook 'linum-mode t)
   #+end_src
*** Enable company mode
    #+begin_src emacs-lisp
      (add-hook 'ruby-mode-hook 'company-mode t)
    #+end_src
*** Turn of line wrapping
    #+begin_src emacs-lisp
      (add-hook 'ruby-mode-hook 'toggle-truncate-lines)
    #+end_src
** Silver Searcher
*** Install
    #+begin_src shell
      brew install the_silver_searcher
    #+end_src
*** Keybindings
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c s s") 'ag)
      (global-set-key (kbd "C-c s p") 'ag-project)
      (global-set-key (kbd "C-c s k") 'ag-kill-buffers)
    #+end_src
** Org
*** Settings
    #+begin_src emacs-lisp
      (setq org-hide-emphasis-markers t)
    #+end_src
*** Fonts
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook
		(lambda ()
		  ;; (variable-pitch-mode t)
		  (olivetti-mode t)))

      ;; (set-face-attribute 'default nil :family "Roboto Mono" :height 130)
      ;; (set-face-attribute 'fixed-pitch nil :family "Iosevka")
      ;; (set-face-attribute 'variable-pitch nil :family "Baskerville")
    #+end_src
*** Add nice bullets
    #+begin_src emacs-lisp
      (require 'org-bullets)

      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-bullets-bullet-list '("‚Åñ"))
    #+end_src
*** Make Lists use a dot
    #+begin_src emacs-lisp
      (font-lock-add-keywords 'org-mode
			      '(("^ *\\([-]\\) "
				 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))
    #+end_src
*** Add emojis
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook 'emojify-mode)
    #+end_src
** Magit
*** Keybindings
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c m s") 'magit-status)
      (global-set-key (kbd "C-c m p") 'magit-push)
      (global-set-key (kbd "C-c m c") 'magit-checkout)
    #+end_src
