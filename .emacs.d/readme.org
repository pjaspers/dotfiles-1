Content-Type: text/enriched
Text-Width: 70

* Package Management

** [[https://github.com/raxod502/straight.el][Straight]]

    Next-generation, purely functional package manager for the Emacs hacker.

    #+begin_src emacs-lisp

      (defvar bootstrap-version)
      (let ((bootstrap-file
             (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
        (unless (file-exists-p bootstrap-file)
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load bootstrap-file nil 'nomessage))
    #+end_src

** Packages

*** [[https://github.com/abo-abo/ace-window][Ace Window]]

     #+begin_src emacs-lisp

       (straight-use-package 'ace-window)
     #+end_src

*** Ag

     #+begin_src emacs-lisp

       (straight-use-package 'ag)
     #+end_src

*** All the icons

    #+begin_src emacs-lisp

      (straight-use-package 'all-the-icons)
    #+end_src

*** [[https://github.com/seagle0128/all-the-icons-ivy-rich][All the icons ivy rich]]

     #+begin_src emacs-lisp

       (straight-use-package 'all-the-icons-ivy-rich)
     #+end_src

*** [[http://company-mode.github.io/][Company]]

     #+begin_src emacs-lisp

       (straight-use-package 'company)
     #+end_src

*** [[https://github.com/ericdanan/counsel-projectile][Counsel projectile]]

     #+begin_src emacs-lisp

       (straight-use-package 'counsel-projectile)
     #+end_src

*** Dashboard

     #+begin_src emacs-lisp

       (straight-use-package 'dashboard)
     #+end_src

*** Doom modeline

     #+begin_src emacs-lisp

       (straight-use-package 'doom-modeline)
     #+end_src

*** Emojify

     #+begin_src emacs-lisp

       (straight-use-package 'emojify)
     #+end_src

*** Exec path from shell

     #+begin_src emacs-lisp

       (straight-use-package 'exec-path-from-shell)
     #+end_src

*** [[https://github.com/johnw42/fira-code-emacs][Fira code mode]]

    #+begin_src emacs-lisp

      (straight-use-package 'fira-code-mode)
    #+end_src
*** [[https://github.com/DarthFennec/highlight-indent-guides][Highlight indent guides]]

    #+begin_src emacs-lisp

      (straight-use-package 'highlight-indent-guides)


      (setq highlight-indent-guides-method 'character)

      (setq highlight-indent-guides-character ?\Â·)

      (setq highlight-indent-guides-auto-character-face-perc 20)

<indent>    </indent>#+end_src
*** [[https://github.com/abo-abo/swiper][Ivy - Counsel - Swiper]]

     #+begin_src emacs-lisp

       (straight-use-package 'ivy)
     #+end_src

*** Magit

     #+begin_src emacs-lisp

       (straight-use-package 'magit)
     #+end_src
*** Org Bullets

     #+begin_src emacs-lisp

       (straight-use-package 'org-bullets)
     #+end_src

*** Projectile

     #+begin_src emacs-lisp

       (straight-use-package 'projectile)
     #+end_src

*** Reveal in osx finder

     #+begin_src emacs-lisp

       (straight-use-package 'reveal-in-osx-finder)
     #+end_src

*** [[https://github.com/felipeochoa/rjsx-mode][Rjsx mode]]

    #+begin_src emacs-lisp

      (straight-use-package 'rjsx-mode)
    #+end_src
*** [[https://github.com/rubocop-hq/rubocop-emacs][Rubocop]]

    #+begin_src emacs-lisp

      (straight-use-package 'rubocop)
    #+end_src

*** [[https://github.com/purcell/sqlformat/][Sqlformat]]

     #+begin_src emacs-lisp

       (straight-use-package 'sqlformat)
     #+end_src

*** [[http://web-mode.org/][Web mode]]

    #+begin_src emacs-lisp

      (straight-use-package 'web-mode)
    #+end_src
*** [[https://github.com/justbur/emacs-which-key][Wich Key]]

     #+begin_src emacs-lisp

       (straight-use-package 'which-key)
     #+end_src
*** [[https://github.com/zenozeng/yafolding.el][Yafolding]]

    #+begin_src emacs-lisp

      (straight-use-package 'yafolding)
    #+end_src
*** [[https://github.com/emacsorphanage/git-gutter-fringe][Git-gutter-fringe]]

    #+begin_src emacs-lisp]

      (straight-use-package 'git-gutter-fringe)

      (require 'git-gutter-fringe)

      (setq git-gutter-fr:side 'right-fringe)
    #+end_src
* UI

** Fonts

    #+begin_src emacs-lisp

      (add-to-list 'default-frame-alist '(font . "Fira Code"))
    #+end_src

** Modeline

    #+begin_src emacs-lisp

      (doom-modeline-mode t)
    #+end_src

** Themes

    Nord is the best _hand:, sadly the emacs theme is missing some colors.
    The doom version is more complete but it doesn't understand what makes nord theme.
    By overriding the doom theme we do get the best of both it seems <x-display><param>(image :type png :file "/Users/tombosmans/.emacs.d/emojis/emojione-v2.2.6-22/1f603.png" :ascent center :heuristic-mask t :background "#2E3440" :scale 1 :height 15)</param>:D</x-display>

    #+begin_src emacs-lisp

      (straight-use-package 'doom-themes)
      (straight-use-package 'nord-theme)
      (load-theme 'doom-nord t)
      (load-theme 'nord t)
    #+end_src

** Dashboard

    First disable default buffers

    #+begin_src emacs-lisp

      (setq-default message-log-max nil)
      (kill-buffer "*Messages*")
      (kill-buffer "*scratch*")
    #+end_src


    #+begin_src emacs-lisp

      (require 'dashboard)
      (dashboard-setup-startup-hook)


      (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard"
            dashboard-startup-banner "~/dotfiles/assets/banner.png"
            dashboard-center-content nil
            dashboard-show-shortcuts nil
            dashboard-set-heading-icons t
            dashboard-set-file-icons t
            dashboard-items '((recents  . 5)
                              (projects . 20))
            dashboard-set-navigator t
            dashboard-navigator-buttons
            `(;; line1
              ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                "Github"
                "Browse homepage"
                (lambda (&rest _) (browse-url "https://github.com/TomBosmans"))))))
    #+end_src

** Navigation

    Quickly switch windows in Emacs

    #+begin_src emacs-lisp

      (global-set-key (kbd "C-x o") 'ace-window)
    #+end_src

**** Documentation

     | Actions while in ace-window |                                                        |
     |-----------------------------+--------------------------------------------------------|

     | key                         | action                                                 |

     |-----------------------------+--------------------------------------------------------|

     | x                           | delete window                                          |

     | m                           | swap windows                                           |

     | M                           | move window                                            |

     | c                           | copy window                                            |

     | j                           | select buffer                                          |

     | n                           | select the previous window                             |

     | u                           | select buffer in the other window                      |

     | c                           | split window fairly, either vertically or horizontally |

     | v                           | split window vertically                                |

     | b                           | split window horizontally                              |

     | o                           | maximize current window                                |

     | ?                           | show these command bindings                            |


* My Functions
** Cleanup file

   removes tabs and white space.

   #+begin_src emacs-lisp

     (defun cleanup-file ()
       (untabify (point-min) (point-max))
       (whitespace-cleanup))


     (defun cleanup-file-on-save ()
       (add-hook 'before-save-hook 'cleanup-file nil t))


     (defun stop-cleanup-file-on-save ()

       (remove-hook 'before-save-hook 'cleanup-file t))
   #+end_src
** dev mode

   This mode will setup all basics I like to have when writing code.

   Can be toggled on/off.


   For fira code mode to work correctly you need to install the symbol font form ~/dotfiles/fonts.

   Also recommended to use fira code font, although it does work with other fonts.

   #+begin_src emacs-lisp

     (defun dev-setup ()
       (linum-mode t)
       (subword-mode t)
       (hl-line-mode t)
       (company-mode t)

       (fira-code-mode t)

       (highlight-indent-guides-mode t)

       (yafolding-mode t)

       (git-gutter-mode t)
       (toggle-truncate-lines)
       (cleanup-file-on-save)

       ;; keybindings

       (local-set-key (kbd "C-M-return") 'yafolding-toggle-all)

       (local-set-key (kbd "C-return") 'yafolding-toggle-element))


     (defun dev-teardown ()
       (linum-mode 0)
       (subword-mode 0)
       (hl-line-mode 0)
       (company-mode 0)

       (fira-code-mode 0)

       (yafolding-mode 0)

       (highlight-indent-guides-mode 0)

       (git-gutter-mode 0)
       (toggle-truncate-lines)
       (stop-cleanup-file-on-save))


     (define-minor-mode dev-mode
       "Hammer time!."
       :lighter " dev"
       (if dev-mode
           (dev-setup)
         (dev-teardown)))
   #+end_src
** open terminal

   #+begin_src emacs-lisp
     (defun named-term (name)
       "Create a terminal with given name."
       (interactive "sName: ")
       (ansi-term "/bin/zsh" name))


     (defun open-named-term (name)
       "Create or open a named terminal buffer"
       (interactive "sName:")
       (let ((buffer (concat "*" name "*")))
         (if (get-buffer buffer) (switch-to-buffer buffer) (named-term name))))


     (defun open-console ()
       "Create or open terminal buffer."
       (interactive)
       (open-named-term "console"))
   #+end_src

* Global Keybindings

   #+begin_src emacs-lisp

     ;; (global-set-key (kbd "C-x O") 'previous-multiframe-window) ;; revert of C-x o
     (global-set-key (kbd "C-c r") 'replace-regexp)
     (global-set-key (kbd "C-c t") 'open-console)

     (global-set-key (kbd "C-c T") 'open-named-term)
     (global-set-key (kbd "C-c z") 'reveal-in-osx-finder)
     (global-set-key (kbd "C-c l o") 'browse-url-at-point)

     (global-set-key (kbd "C-s") 'swiper)
   #+end_src
* General Settings

** Pickup changes to files.

   #+begin_src emacs-lisp

     (global-auto-revert-mode 1)
   #+end_src
** Display available keybindings in popup

    #+begin_src emacs-lisp

      (which-key-mode t)
    #+end_src

** Prevent 'saving customizations' to be writtin in init.el.

    https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html

    #+begin_src emacs-lisp

      (setq custom-file "~/.emacs.d/custom.el")
      (when (file-exists-p "custom.el") (load "custom"))
    #+end_src
** Project management

    #+begin_src emacs-lisp

      (projectile-mode t)
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    #+end_src

** Silver Searcher

**** Install

    #+begin_src shell

      brew install the_silver_searcher
    #+end_src

**** Keybindings

    #+begin_src emacs-lisp

      (global-set-key (kbd "C-c s s") 'ag)
      (global-set-key (kbd "C-c s p") 'ag-project)
      (global-set-key (kbd "C-c s k") 'ag-kill-buffers)
    #+end_src


** Stop making annoying sounds

    The error sounds just hurts my ears...

    #+begin_src emacs-lisp

      (defun my-bell-function ())
      (setq ring-bell-function 'my-bell-function)
      (setq visible-bell nil)
    #+end_src

** Line numbers

    We don't enable it globally, enable it in the modes you want.

    #+begin_src emacs-lisp

      (setq linum-format "%3d \u2502")
    #+end_src

** Highlight matching parenthesis

    #+begin_src emacs-lisp

      (show-paren-mode t)
    #+end_src

** Disable GNU clutter

    #+begin_src emacs-lisp

      (menu-bar-mode -1)
      (toggle-scroll-bar -1)
      (tool-bar-mode -1)
    #+end_src

** Say no to tabs

   #+begin_src emacs-lisp

     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 2)
   #+end_src

** Stop making temp files!

   Just ripped it from [[https://github.com/pjaspers/emacs/blob/master/customizations/pjaspers-editing.el#L51][pjasper]].
   #+begin_src emacs-lisp

     (setq backup-inhibited t
           make-backup-files nil
           backup-directory-alist `((".*" . ,temporary-file-directory))
           auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
   #+end_src

** Fix shell commands on osx

    OS X has an issue with picking up the right system env
    Explictly setting it here (So shell-command and buddies can use it)

    #+begin_src emacs-lisp

      (require 'exec-path-from-shell)
      (when (memq window-system '(mac ns))
        (exec-path-from-shell-initialize))
    #+end_src

** Mini buffer completion

    #+begin_src emacs-lisp

      (ivy-mode t)
      (counsel-mode t)
      (counsel-projectile-mode t)
      (ivy-rich-mode t)
      (all-the-icons-ivy-rich-mode t)


      (setq ivy-use-virtual-buffers t
            ivy-count-format "%d/%d ")


      (setq all-the-icons-ivy-file-commands
            '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir))
    #+end_src

**** [[https://github.com/abo-abo/swiper/wiki/Dont-open-directory-mode][don't open directory mode]]

     When enable "Don't open directory" mode, ivy-mode will only open file and don't open directory. if user want to open dirctory, another key should typed, for example: "C-f". This mode is simple and predictable.


     When the below code is an example:
     1 when type "enter", if current candidate is a directory, its subdir will be completed, if a file, open it.
     2 if user want to open directory, type "C-f".


     #+begin_src emacs-lisp

       (setq ivy-extra-directories nil)


       (defun eh-ivy-open-current-typed-path ()
         (interactive)
         (when ivy--directory
           (let* ((dir ivy--directory)
                  (text-typed ivy-text)
                  (path (concat dir text-typed)))
             (delete-minibuffer-contents)
             (ivy--done path))))


       (define-key ivy-minibuffer-map (kbd "<<return>") 'ivy-alt-done)
       (define-key ivy-minibuffer-map (kbd "C-f") 'eh-ivy-open-current-typed-path)
     #+end_src

** Delete selection

    Act like a normal text editor.

    #+begin_src emacs-lisp

      (delete-selection-mode t)
    #+end_src
* Advanced Settings

** Git

*** Keybindings

    #+begin_src emacs-lisp

      (global-set-key (kbd "C-c m s") 'magit-status)
      (global-set-key (kbd "C-c m p") 'magit-push)
      (global-set-key (kbd "C-c m c") 'magit-checkout)
    #+end_src

** Org

*** Settings

    #+begin_src emacs-lisp

      (setq org-hide-emphasis-markers t)
    #+end_src

*** Disable emacs build in version control

    #+begin_src emacs-lisp

      (setq vc-handled-backends nil)
    #+end_src

*** Add nice bullets

    #+begin_src emacs-lisp

      (require 'org-bullets)


      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-bullets-bullet-list '("â"))
    #+end_src

*** Make Lists use a dot

    #+begin_src emacs-lisp

      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â¢"))))))
    #+end_src

*** Add emojis

    #+begin_src emacs-lisp

      (add-hook 'org-mode-hook 'emojify-mode)
    #+end_src
*** Add cleanup on save

    #+begin_src emacs-lisp

      (add-hook 'org-mode-hook 'cleanup-file-on-save)
    #+end_src
*** theme

    #+begin_src emacs-lisp

      (defun theme-org-mode-hook ()
        (dolist (face '(org-level-1)) (set-face-attribute face nil :weight 'semi-bold :height 1.3))
        (dolist (face '(org-level-2)) (set-face-attribute face nil :weight 'semi-bold :height 1.2))
        (dolist (face '(org-level-3)) (set-face-attribute face nil :weight 'semi-bold :height 1.1)))


        (add-hook 'org-mode-hook 'theme-org-mode-hook)
    #+end_src

** Ruby

  #+begin_src emacs-lisp

    (defun my-ruby-mode-hook ()
      (rubocop-mode t)

      (dev-mode t))


    (add-hook 'ruby-mode-hook 'my-ruby-mode-hook)
  #+end_src

** Terminal

   #+begin_src emacs-lisp

     (defun my-term-mode-hook ()
       "Load when term-mode is loaded."
       (define-key term-raw-map (kbd "C-c C-y") 'term-paste)) ;; paste clipboard into terminal


     (add-hook 'term-mode-hook 'my-term-mode-hook)
   #+end_src

** SQL

*** format

**** Dependencies

     #+begin_src shell

        pip3 install sqlparse
     #+end_src

**** setup

     #+begin_src emacs-lisp

       (setq sqlformat-command 'pgformatter)
       (setq sqlformat-args '("-s2" "-g"))


       (defun my-sql-mode-hook ()
         "Load whenever sql-mode is loaded."

         (dev-mode t)
         (local-set-key (kbd "C-c C-f") 'sqlformat))


       (add-hook 'sql-mode-hook 'my-sql-mode-hook)
     #+end_src
** HTML

   #+begin_src emacs-lisp

     (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))

     (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))


     (setq web-mode-markup-indent-offset 2
           web-mode-css-indent-offset 2
           web-mode-code-indent-offset 2)


     (defun my-web-mode-hook ()

       (dev-mode t))


     (add-hook 'web-mode-hook  'my-web-mode-hook)
   #+end_src
** Javascript

   #+begin_src emacs-lisp

     (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))


     (setq js-indent-level 2)


     (defun my-js-mode-hook ()

       (dev-mode t))


     (add-hook 'rjsx-mode-hook 'my-js-mode-hook)
   #+end_src
