* Package Management
  We will be using [[https://github.com/raxod502/straight.el][Straight]] as our package manager.
  - Here are some variables you may be interested in (some of them must be set before the bootstrap code runs, if they might affect how straight.el itself is loaded):
    | straight-repository-branch       | to get the latest version of straight.el from the develop branch, rather than the default master which is updated less frequently but which is ostensibly more stable.                        |
    | straight-check-for-modifications | to configure an alternate way for straight.el to check for modifications made to package source code, rather than the default (which is 100% reliable, but has a minor cost to startup time). |
    | straight-use-package-by-default  | if you use use-package, then this makes each use-package form also invoke straight.el to install the package, unless otherwise specified.                                                     |
    | straight-vc-git-default-protocol | by default, straight.el clones over HTTPS. If you need packages from private Git repositories in your configuration, then you might want to use SSH instead.                                  |

  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src

** Install packages
   Out of the box, you can install any package listed on MELPA, GNU ELPA, or Emacsmirror, which is to say any package in existence. (Although MELPA is used as a package listing, packages are installed by cloning their Git repositories rather than by downloading tarballs like package.el does.) To install a package temporarily (until you restart Emacs), run M-x straight-use-package and select the package you want. To install a package permanently, place a call to straight-use-package in your init-file, like:
   #+begin_example emacs-lisp
     (straight-use-package 'el-patch)
   #+end_example

   Note that installing a package will activate all of its autoloads, but it will not actually require the features provided by the package. This means that you might need to use require or autoload for some antiquated packages that do not properly declare their autoloads.
   To learn more, see the documentation on the package lifecycle.

** Integration with use-package
   [[https://github.com/jwiegley/use-package][use-package]] is a macro that provides convenient syntactic sugar for many common tasks related to installing and configuring Emacs packages. Of course, it does not actually install the packages, but instead defers to a package manager, like straight.el (which comes with use-package integration by default).
   To use use-package, first install it with straight.el:
   #+begin_src emacs-lisp
     (straight-use-package 'use-package)
   #+end_src

   Now use-package will use straight.el to automatically install missing packages if you provide :straight t:
   #+begin_example emacs-lisp
     (use-package el-patch
       :straight t)
   #+end_example

   You can still provide a custom recipe for the package:
   #+begin_example emacs-lisp
     (use-package el-patch
       :straight (el-patch :type git :host github :repo "raxod502/el-patch"
                           :fork (:host github
                                  :repo "your-name/el-patch")))
   #+end_example

   Specifying :straight t is unnecessary if you set straight-use-package-by-default to a non-nil value. (Note that the variable use-package-always-ensure is associated with package.el, and you should not use it with straight.el.)
   #+begin_src emacs-lisp
     (setq straight-use-package-by-default 1)
   #+end_src
* UI
** Dashboard
   First disable default buffers
   #+begin_src emacs-lisp
     (setq-default message-log-max nil)
     (kill-buffer "*Messages*")
     (kill-buffer "*scratch*")
   #+end_src

   Now we can setup [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard.el]]:
   #+begin_src emacs-lisp
     (use-package dashboard
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard"
             dashboard-startup-banner "~/dotfiles/assets/banner.png"
             dashboard-center-content nil
             dashboard-show-shortcuts nil
             dashboard-set-heading-icons t
             dashboard-set-file-icons t
             dashboard-items '((recents  . 5)
                               (projects . 20))
             dashboard-set-navigator t))
   #+end_src
** Disable GNU clutter
   #+begin_src emacs-lisp
     (menu-bar-mode -1)
     (toggle-scroll-bar -1)
     (tool-bar-mode -1)
   #+end_src
** Fonts
   can be found in [[file+sys:~/dotfiles/fonts][fonts folder]]
*** [[https://github.com/tonsky/FiraCode][FiraCoda]]
    #+begin_src emacs-lisp
      (add-to-list 'default-frame-alist '(font . "Fira Code"))
    #+end_src
**** [[https://github.com/johnw42/fira-code-emacs][Fira code mode]]
     #+begin_src emacs-lisp
       (use-package fira-code-mode)
     #+end_src

** Modeline
   Using [[https://github.com/seagle0128/doom-modeline][doom modeline]].
   #+begin_src emacs-lisp
     (use-package doom-modeline
                  :config
                  (doom-modeline-mode 1))
   #+end_src
** Themes
   Nord is the best :ok_hand:, sadly the emacs theme is missing some colors.
   The doom version is more complete but it doesn't understand what makes nord theme.
   By overriding the doom theme we do get the best of both it seems :D
   #+begin_src emacs-lisp
     (use-package nord-theme
                  :config
                  (use-package doom-themes)
                  (load-theme 'doom-nord 1)
                  (load-theme 'nord 1))
   #+end_src
* Misc
** Delete selection
    Act like a normal text editor.
    #+begin_src emacs-lisp
      (delete-selection-mode t)
    #+end_src
** Fix shell commands on osx
    OS X has an issue with picking up the right system env
    Explictly setting it here (So shell-command and buddies can use it)
    #+begin_src emacs-lisp
      (use-package exec-path-from-shell
        :config
        (when (memq window-system '(mac ns))
          (exec-path-from-shell-initialize)))
    #+end_src
** Pickup changes to files.
   #+begin_src emacs-lisp
     (global-auto-revert-mode 1)
   #+end_src
** Prevent 'saving customizations' to be writtin in init.el.
    https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html
    #+begin_src emacs-lisp
      (setq custom-file "~/.emacs.d/custom.el")
      (when (file-exists-p "custom.el") (load "custom"))
    #+end_src
** Say no to tabs
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 2)
   #+end_src
** Stop making annoying sounds
    The error sounds just hurts my ears...
    #+begin_src emacs-lisp
      (defun my-bell-function ())
      (setq ring-bell-function 'my-bell-function)
      (setq visible-bell nil)
    #+end_src
** Stop making temp files!
   Just ripped it from [[https://github.com/pjaspers/emacs/blob/master/customizations/pjaspers-editing.el#L51][pjaspers]].
   #+begin_src emacs-lisp
     (setq backup-inhibited t
           make-backup-files nil
           backup-directory-alist `((".*" . ,temporary-file-directory))
           auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
   #+end_src
* Major Modes
** [[https://github.com/felipeochoa/rjsx-mode][Rjsx mode]]
   #+begin_src emacs-lisp
     (use-package rjsx-mode
       :config
       (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
       (setq js-indent-level 2)
       (defun my-js-mode-hook ()
         (dev-mode t))
       (add-hook 'rjsx-mode-hook 'my-js-mode-hook))
   #+end_src
** [[http://web-mode.org/][Web mode]]
   #+begin_src emacs-lisp
     (use-package web-mode
       :config
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
       (setq web-mode-markup-indent-offset 2
             web-mode-css-indent-offset 2
             web-mode-code-indent-offset 2)
       (defun my-web-mode-hook ()
         (dev-mode t))
       (add-hook 'web-mode-hook  'my-web-mode-hook))
   #+end_src
** [[https://magit.vc/][Magit]]
   #+begin_src emacs-lisp
     (use-package magit
       :bind
       ("C-c m s" . magit-status)
       ("C-c m c" . magit-checkout))
   #+end_src
** Org
*** Settings
    #+begin_src emacs-lisp
      (setq org-hide-emphasis-markers t)
    #+end_src
*** Disable emacs build in version control
    #+begin_src emacs-lisp
      (setq vc-handled-backends nil)
    #+end_src
*** [[https://github.com/sabof/org-bullets][org bullets]]
    #+begin_src emacs-lisp
      (use-package org-bullets
        :hook
        (org-mode . org-bullets-mode)
        :config
        (setq org-bullets-bullet-list '("⁖")))
    #+end_src
*** Make Lists use a dot
    #+begin_src emacs-lisp
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    #+end_src
*** Add emojis
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook 'emojify-mode)
    #+end_src
*** Add cleanup on save
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook 'cleanup-file-on-save)
    #+end_src
*** theme
    #+begin_src emacs-lisp
      (defun theme-org-mode-hook ()
        (dolist (face '(org-level-1)) (set-face-attribute face nil :weight 'semi-bold :height 1.3))
        (dolist (face '(org-level-2)) (set-face-attribute face nil :weight 'semi-bold :height 1.2))
        (dolist (face '(org-level-3)) (set-face-attribute face nil :weight 'semi-bold :height 1.1)))

        (add-hook 'org-mode-hook 'theme-org-mode-hook)
    #+end_src
** Ruby
  #+begin_src emacs-lisp
    (defun my-ruby-mode-hook ()
      (dev-mode t))

    (add-hook 'ruby-mode-hook 'my-ruby-mode-hook)
  #+end_src
** Terminal
   #+begin_src emacs-lisp
     (defun my-term-mode-hook ()
       "Load when term-mode is loaded."
       (define-key term-raw-map (kbd "C-c C-y") 'term-paste)) ;; paste clipboard into terminal

     (add-hook 'term-mode-hook 'my-term-mode-hook)
   #+end_src
** SQL
*** format
**** Dependencies
     #+begin_src shell
        pip3 install sqlparse
     #+end_src
**** setup
     #+begin_src emacs-lisp
       (use-package sqlformat
         :config
         (setq sqlformat-command 'pgformatter
               sqlformat-args '("-s2" "-g")))

       (defun my-sql-mode-hook ()
         "Load whenever sql-mode is loaded."
         (dev-mode t)
         (local-set-key (kbd "C-c C-f") 'sqlformat))

       (add-hook 'sql-mode-hook 'my-sql-mode-hook)
     #+end_src
** css
   #+begin_src emacs-lisp
     (setq css-indent-offset 2)
     (add-hook 'css-mode-hook 'dev-mode)
   #+end_src
* Minor Modes
** [[http://company-mode.github.io/][Company]]
   #+begin_src emacs-lisp
     (use-package company)
   #+end_src
** [[https://github.com/iqbalansari/emacs-emojify][Emojify]]
   #+begin_src emacs-lisp
     (use-package emojify)
   #+end_src

** [[https://github.com/DarthFennec/highlight-indent-guides][Highlight indent guides]]
    #+begin_src emacs-lisp
      (use-package highlight-indent-guides
        :config
        (setq highlight-indent-guides-method 'character
              highlight-indent-guides-character ?\·
              highlight-indent-guides-auto-character-face-perc 20))
    #+end_src

** [[https://github.com/zenozeng/yafolding.el][Yafolding]]
   #+begin_src emacs-lisp
     (use-package yafolding)
   #+end_src

* Global (Modes)
** [[https://github.com/abo-abo/ace-window][ace-window]]

   | Actions while in ace-window |                                                        |
   |-----------------------------+--------------------------------------------------------|
   | key                         | action                                                 |
   |-----------------------------+--------------------------------------------------------|
   | x                           | delete window                                          |
   | m                           | swap windows                                           |
   | M                           | move window                                            |
   | c                           | copy window                                            |
   | j                           | select buffer                                          |
   | n                           | select the previous window                             |
   | u                           | select buffer in the other window                      |
   | c                           | split window fairly, either vertically or horizontally |
   | v                           | split window vertically                                |
   | b                           | split window horizontally                              |
   | o                           | maximize current window                                |
   | ?                           | show these command bindings                            |

   #+begin_src emacs-lisp
     (use-package ace-window
       :config
       (global-set-key (kbd "C-x o") 'ace-window))
   #+end_src
** [[https://github.com/Wilfred/ag.el][ag]]
   make sure you have installed [[https://github.com/ggreer/the_silver_searcher][the silver searcher]]!
   #+begin_src shell
     brew install the_silver_searcher
   #+end_src

   #+begin_src emacs-lisp
     (use-package ag
       :bind
       ("C-c s s" . ag)
       ("C-c s p" . ag-project)
       ("C-c s k" . ag-kill-buffers))
   #+end_src

** [[https://github.com/bbatsov/projectile][projectile]]
   #+begin_src emacs-lisp
     (use-package projectile
       :config
       (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode 1))
   #+end_src
** [[https://github.com/justbur/emacs-which-key][which-key]]
   #+begin_src emacs-lisp
     (use-package which-key
       :config
       (which-key-mode 1))
   #+end_src
** [[https://github.com/abo-abo/swiper][ivy and family]]
   - [[https://github.com/abo-abo/swiper/wiki/Dont-open-directory-mode][don't open directory mode]]
     When enable "Don't open directory" mode, ivy-mode will only open file and don't open directory. if user want to open dirctory, another key should typed, for example: "C-f". This mode is simple and predictable.
   #+begin_src emacs-lisp
     (use-package ivy
       :config
       (ivy-mode 1)
       (setq ivy-extra-directories nil)
       (defun eh-ivy-open-current-typed-path ()
         (interactive)
         (when ivy--directory
           (let* ((dir ivy--directory)
                  (text-typed ivy-text)
                  (path (concat dir text-typed)))
             (delete-minibuffer-contents)
             (ivy--done path))))
       (define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done)
       (define-key ivy-minibuffer-map (kbd "C-f") 'eh-ivy-open-current-typed-path))
   #+end_src
*** [[https://github.com/abo-abo/swiper][counsel]]
   #+begin_src emacs-lisp
     (use-package counsel
       :requires (ivy)
       :config (counsel-mode 1))
   #+end_src
*** [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
   #+begin_src emacs-lisp
     (use-package counsel-projectile
       :requires (ivy counsel projectile)
       :config (counsel-projectile-mode 1))
   #+end_src
*** [[https://github.com/Yevgnen/ivy-rich][ivy-rich]]
   #+begin_src emacs-lisp
     (use-package ivy-rich
       :requires (ivy)
       :config (ivy-rich-mode 1))
   #+end_src
*** [[https://github.com/seagle0128/all-the-icons-ivy-rich][all the icons ivy rich]]
   #+begin_src emacs-lisp
     (use-package all-the-icons-ivy-rich
       :requires (all-the-icons ivy ivy-rich)
       :config (all-the-icons-ivy-rich-mode 1))
   #+end_src
** [[https://github.com/kaz-yos/reveal-in-osx-finder][reveal in osx finder]]
   #+begin_src emacs-lisp
     (use-package reveal-in-osx-finder
       :bind ("C-c z" . reveal-in-osx-finder))
   #+end_src
** [[https://github.com/domtronn/all-the-icons.el][all the icons]]
   #+begin_src emacs-lisp
     (use-package all-the-icons)
   #+end_src
* My Functions
** Cleanup file
   removes tabs and white space.
   #+begin_src emacs-lisp
     (defun cleanup-file ()
       (untabify (point-min) (point-max))
       (whitespace-cleanup))

     (defun cleanup-file-on-save ()
       (add-hook 'before-save-hook 'cleanup-file nil t))

     (defun stop-cleanup-file-on-save ()
       (remove-hook 'before-save-hook 'cleanup-file t))
   #+end_src
** dev mode
   This mode will setup all basics I like to have when writing code.
   Can be toggled on/off.

   For fira code mode to work correctly you need to install the symbol font form ~/dotfiles/fonts.
   Also recommended to use fira code font, although it does work with other fonts.
   #+begin_src emacs-lisp
     (defun dev-setup ()
       (display-line-numbers-mode 1)
       (subword-mode 1)
       (hl-line-mode 1)
       (company-mode 1)
       (fira-code-mode 1)
       (highlight-indent-guides-mode 1)
       (yafolding-mode 1)
       (git-gutter-mode 1)
       (toggle-truncate-lines)
       (cleanup-file-on-save)
       ;; keybindings
       (local-set-key (kbd "C-M-return") 'yafolding-toggle-all)
       (local-set-key (kbd "C-return") 'yafolding-toggle-element))

     (defun dev-teardown ()
       (display-line-numbers-mode 0)
       (subword-mode 0)
       (hl-line-mode 0)
       (company-mode 0)
       (fira-code-mode 0)
       (yafolding-mode 0)
       (highlight-indent-guides-mode 0)
       (git-gutter-mode 0)
       (toggle-truncate-lines)
       (stop-cleanup-file-on-save))

     (define-minor-mode dev-mode
       "Hammer time!."
       :lighter " dev"
       (if dev-mode
           (dev-setup)
         (dev-teardown)))
   #+end_src
** open terminal
   #+begin_src emacs-lisp
     (defun named-term (name)
       "Create a terminal with given name."
       (interactive "sName: ")
       (ansi-term "/bin/zsh" name))

     (defun open-named-term (name)
       "Create or open a named terminal buffer"
       (interactive "sName:")
       (let ((buffer (concat "*" name "*")))
         (if (get-buffer buffer) (switch-to-buffer buffer) (named-term name))))

     (defun open-console ()
       "Create or open terminal buffer."
       (interactive)
       (open-named-term "console"))

     (global-set-key (kbd "C-c t") 'open-console)
     (global-set-key (kbd "C-c T") 'open-named-term)
   #+end_src
